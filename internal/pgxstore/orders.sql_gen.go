// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package pgxstore

import (
	"context"

	"github.com/google/uuid"
)

const CreateOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, order_number, status)
VALUES ($1, $2,  'NEW')
RETURNING id, user_id, order_number, status, accrual, created_at, updated_at, deleted_at
`

type CreateOrderParams struct {
	OrderNumber string    `db:"order_number" json:"order_number"`
	UserID      uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (*Order, error) {
	row := q.db.QueryRow(ctx, CreateOrder, arg.UserID, arg.OrderNumber)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderNumber,
		&i.Status,
		&i.Accrual,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const GetOrderByNumber = `-- name: GetOrderByNumber :one
SELECT id, user_id, order_number, status, accrual, created_at, updated_at, deleted_at FROM orders WHERE order_number=$1 LIMIT 1
`

func (q *Queries) GetOrderByNumber(ctx context.Context, orderNumber string) (*Order, error) {
	row := q.db.QueryRow(ctx, GetOrderByNumber, orderNumber)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderNumber,
		&i.Status,
		&i.Accrual,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const GetUserOrders = `-- name: GetUserOrders :many
SELECT id, user_id, order_number, status, accrual, created_at, updated_at, deleted_at FROM orders WHERE user_id=$1 ORDER BY created_at DESC
`

func (q *Queries) GetUserOrders(ctx context.Context, userID uuid.UUID) ([]*Order, error) {
	rows, err := q.db.Query(ctx, GetUserOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderNumber,
			&i.Status,
			&i.Accrual,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const PutOrderForProcessing = `-- name: PutOrderForProcessing :one
INSERT INTO orders_to_process (order_id, process_status)
VALUES ($1, 'NEW')
RETURNING order_id, process_status, created_at, updated_at, deleted_at
`

func (q *Queries) PutOrderForProcessing(ctx context.Context, orderID uuid.UUID) (*OrdersToProcess, error) {
	row := q.db.QueryRow(ctx, PutOrderForProcessing, orderID)
	var i OrdersToProcess
	err := row.Scan(
		&i.OrderID,
		&i.ProcessStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
